% This script will allow me to see if there are actually 1 or 2 subunits by analyzing the combined energy of all the guns within each subunit 
% Author - Abhishek De, 12/18
close all; clearvars;
plot_counter = 1;
load S1LMS.mat
load S2LMS.mat
load filename_c.mat
load filename_l.mat
load numsubunitspikes.mat
load RHO_all.mat
load THETA_all.mat
load oog_idx_all.mat
load not_oog_idx_all.mat
filename = [filename_c; filename_l];
plot_counter = 1;
N = numel(filename);
NPOINTS = 65536;
alpha = 0.05;
crit1 = chi2inv(1-alpha,3);
crit2 = chi2inv(1-alpha,1);
numsubplots = ceil(sqrt(N));
significantsubunits = zeros(N,1);
maxT = 8; 
for ii = 1:N
    global reversalflagidx stepsizescale stepsize nreversals
    stro = nex2stro(findfile(char(filename(ii,:))));
    spikename = 'sig001a';%getSpikenum(stro);
    maskidx = strcmp(stro.sum.rasterCells(1,:),'subunit_mask');
    spikeidx = strcmp(stro.sum.rasterCells(1,:),spikename);
    nstixperside = stro.sum.exptParams.nstixperside;
    ngammasteps = 2^16; % 65536
    linepredtol = stro.sum.exptParams.linepredtol;
    stepsizescale = stro.sum.exptParams.stepsizescale;
    stepsize = stro.sum.exptParams.stepsize;
    nreversals = stro.sum.exptParams.nreversals;
    reversalflagidx = strcmp(stro.sum.trialFields(1,:),'reversalflag');
    bkgnd_ridx = find(strcmp(stro.sum.trialFields(1,:),'bkgnd_r'));
    bkgnd_gidx = find(strcmp(stro.sum.trialFields(1,:),'bkgnd_g'));
    bkgnd_bidx = find(strcmp(stro.sum.trialFields(1,:),'bkgnd_b'));
    seedidx = strcmp(stro.sum.trialFields(1,:),'seed');
    correctidx = strcmp(stro.sum.trialFields(1,:),'correct');
    nframesidx = strcmp(stro.sum.trialFields(1,:),'num_frames');
    stimonidx = strcmp(stro.sum.trialFields(1,:),'stim_on');
    stimoffidx = strcmp(stro.sum.trialFields(1,:),'stim_off');
    fponidx = strcmp(stro.sum.trialFields(1,:),'fp_on');
    fpacqidx = strcmp(stro.sum.trialFields(1,:),'fpacq');
    weightsidx = strcmp(stro.sum.rasterCells(1,:),'weights');
    noisewvidx = strcmp(stro.sum.rasterCells(1,:),'sig001U_wf');
    signalwvidx = strcmp(stro.sum.rasterCells(1,:),'sig001a_wf');
    muidxs = [find(strcmp(stro.sum.trialFields(1,:),'mu1')), ...
        find(strcmp(stro.sum.trialFields(1,:),'mu2')), ...
        find(strcmp(stro.sum.trialFields(1,:),'mu3'))];
    sigmaidxs = [find(strcmp(stro.sum.trialFields(1,:),'sigma1')), ...
        find(strcmp(stro.sum.trialFields(1,:),'sigma2')), ...
        find(strcmp(stro.sum.trialFields(1,:),'sigma3'))];
    latencyidx = strcmp(stro.sum.trialFields(1,:),'latency');
    basisvecidx = strcmp(stro.sum.rasterCells(1,:),'basis_vec');
    msperframe = 1000/stro.sum.exptParams.framerate;
    basisvecdiridx = strcmp(stro.sum.trialFields(1,:),'weights_idx');
    neurothreshidx = strcmp(stro.sum.trialFields(1,:),'neurothresh'); % when exactly the neurothresh trials started
    targetspikerateidx = strcmp(stro.sum.trialFields(1,:),'targetspikerate');
    ntrials = size(stro.trial,1);
    
    xx = linspace(stro.sum.exptParams.gauss_locut/1000, stro.sum.exptParams.gauss_hicut/1000,ngammasteps); % xx represents the probabilities. For more info, have a look at the MATLAB 'norminv' function.
    yy = norminv(xx'); % defining norminv to extract the values for which the cdf values range between gauss_locut and gauss_hicut
    noisetypeidx = find(strcmp(stro.sum.trialFields(1,:),'noise_type'));
    L = stro.trial(:,noisetypeidx)==1;
    mu1idx = find(strcmp(stro.sum.trialFields(1,:),'mu1'));
    mu2idx = find(strcmp(stro.sum.trialFields(1,:),'mu2'));
    mu3idx = find(strcmp(stro.sum.trialFields(1,:),'mu3'));
    sigma1idx = find(strcmp(stro.sum.trialFields(1,:),'sigma1'));
    sigma2idx = find(strcmp(stro.sum.trialFields(1,:),'sigma2'));
    sigma3idx = find(strcmp(stro.sum.trialFields(1,:),'sigma3'));
    muvect = unique(stro.trial(L,[mu1idx mu2idx mu3idx]),'rows')/1000;
    sigmavect = unique(stro.trial(L,[sigma1idx sigma2idx sigma3idx]),'rows')/1000;
    sigmavect(all(any(sigmavect == 0),2),:) = [];
    gausslims = [stro.sum.exptParams.gauss_locut stro.sum.exptParams.gauss_hicut]/1000;
    x = linspace(gausslims(1),gausslims(2),NPOINTS);
    Fx = norminv(x)*sigmavect(1);
    sigmacorrectionfactor = std(Fx)./sigmavect(1);
    muvar = (sigmavect(1)*sigmacorrectionfactor)^2;
    
    mask_changes = [2];
    all_masks = stro.ras(:,maskidx);
    Fx = @(xi) any(isnan(xi)); % function that finds 'NaN' in a cell array
    inds = find(cellfun(Fx,stro.ras(:,basisvecidx))==0);
    if isempty(inds)
        inds = size(stro.trial,1)-1;
    end
    last_wntrial =  inds(1)-1;
    for k = 3:last_wntrial
        if isequal(all_masks{k}, all_masks{k-1}) %|| all(all_masks{k} == 0) && any(isnan(all_masks{k-1}))
            continue
        else
            mask_changes = [mask_changes k-1 k]; %#ok<AGROW>
        end
    end
    if mask_changes(end) == last_wntrial
        mask_changes(end) = [];
    else
        mask_changes = [mask_changes  last_wntrial];
    end
    mask_changes = reshape(mask_changes , 2, []);
    use_STCOVmex_ST = 1; % 1 - Will use STCOVmex_ST, 0 - Will use STCOVmex
    subunitmasktrials = mask_changes(:,2);
    
    % As of now just calculate the WNsubunit STA
    st_mask = stro.ras{subunitmasktrials(1),maskidx}; % subunit mask
    st_mask(st_mask == 0) = Inf;
    [stIdxs,~,~] = unique(st_mask); % now the Infs map to nsubunits+1
    num_subunits = length(stIdxs)-any(isinf(stIdxs)); % nsubunits, like subunits A and B
    if use_STCOVmex_ST
        STCOV_st('init', {num_subunits 3 maxT});
    else
        STCOVmex('init', {num_subunits 3 maxT});
    end
    
    for k = subunitmasktrials(1):subunitmasktrials(2)
        nframes = stro.trial(k,nframesidx);
        if (nframes == 0)
            continue;
        end
        seed = stro.trial(k,seedidx);
        mu = stro.trial(k,muidxs)/1000;
        sigma = stro.trial(k,sigmaidxs)/1000;
        
        % org_mask tells u if u have updated the mask or not. If org_mask is non-zero it means at this particular trial
        % u have selected the subunits and need to analyse its computation
        org_mask = stro.ras{k,maskidx};
        if any(org_mask)
            org_mask(org_mask == 0) = Inf;
            [subunitIdxs,~,mask] = unique(org_mask); % now the Infs map to nsubunits+1
            nrandnums_perchannel = length(subunitIdxs)-any(isinf(subunitIdxs)); % nsubunits, like subunits A and B
            mask = [mask; mask+max(mask); mask+2*max(mask)]; %#ok<AGROW>
        else
            nrandnums_perchannel = nstixperside^2; % In this case, it is the 100 pixels which are flickering when no subunits are selected
        end
        
        % assuming Gaussian gun noise only, random number generator
        % routine as a mexfile (getEJrandnums.mexw64)
        invnormcdf = bsxfun(@plus, bsxfun(@times, yy, sigma), mu);
        randnums = getEJrandnums(3*nrandnums_perchannel*nframes, seed); % random numbers for 300 x 9 pixels
        % This is the extracted colors for subunits/pixels using the seed number
        randnums = reshape(randnums, 3*nrandnums_perchannel, nframes);
        for gun = 1:3
            idxs = (1:nrandnums_perchannel)+nrandnums_perchannel*(gun-1);
            randnums(idxs,:) = reshape(invnormcdf(randnums(idxs,:)+1,gun),[length(idxs) nframes]);
        end
        
        rgbs = randnums;
        t_stimon = stro.trial(k, stimonidx);
        spiketimes = (stro.ras{k,spikeidx}-t_stimon)*1000; % observing spiketimes in milliseconds
        frametimes = linspace(0, nframes*msperframe, nframes)+(msperframe/2)';
        spiketimes(spiketimes < maxT*msperframe) = [];
        spiketimes(spiketimes > frametimes(end)) = [];
        n = hist(spiketimes, frametimes);
        if use_STCOVmex_ST
            STCOV_st(rgbs(:),n);
        else
            STCOVmex(rgbs(:),n);
        end
        
    end
    if use_STCOVmex_ST
        out = STCOV_st('return');
    else
        out = STCOVmex('return');
    end
    STS = out{1};  % A (dimension) x 9(frames) matrix
    nspikes = out{3};
    clear STCOV_st out;
    STAs = fliplr(STS/nspikes);
    zscoremeans = STAs./(sigmavect(1)/sqrt(nspikes));
    energyS1 = zscoremeans([1 3 5],:).^2;
    [~,indS1] = max(max(energyS1,[],2));
    energyS2 = zscoremeans([2 4 6],:).^2;
    [~,indS2] = max(max(energyS2,[],2));
    cumenergyS1 = sum(energyS1,1); % cumulative energy Subunit 1
    cumenergyS2 = sum(energyS2,1); % cumulative energy Subunit 2
    significantsubunits(ii) = any(cumenergyS1(2:end)>crit1) + any(cumenergyS2(2:end)>crit1);
    
    figure(plot_counter); subplot(numsubplots,numsubplots,ii); plot(log(cumenergyS1),'Linewidth',2); hold on; plot(log(cumenergyS2),'Linewidth',2); plot([1 maxT],[log(crit1) log(crit1)],'k'); 
    set(gca,'Ylim',[-5 10],'Xlim',[1 maxT]); 
    if significantsubunits(ii) == 1
        set(gca,'XColor',[1 0 0],'YColor',[1 0 0]);
    end
    hold off;
%     figure(plot_counter+1); subplot(numsubplots,numsubplots,ii); plot(log(energyS1(indS1,:)),'Linewidth',2); hold on; plot(log(energyS2(indS2,:)),'Linewidth',2); plot([1 maxT],[log(crit2) log(crit2)],'k'); 
%     set(gca,'Ylim',[-5 10],'Xlim',[1 maxT]); 
%     if any(energyS1(indS1,:)>crit2) + any(energyS2(indS2,:)>crit2) == 1
%         set(gca,'XColor',[1 0 0],'YColor',[1 0 0]);
%     end
%     hold off;
    
    % Obtaining the basis vectors / STA
    neurothreshmode = stro.trial(:,neurothreshidx);
    basisvec_dropidx = inds(end);
    neurothresh_startidx = max(find(neurothreshmode==1,1),basisvec_dropidx+1); % There is possibility of pressing the Neurothresh button multiple times
    num_targetspikerates = unique(stro.trial(neurothresh_startidx:end,targetspikerateidx));
    t_offset = stro.trial(end,latencyidx)/1000;
    vect = stro.ras{basisvec_dropidx,basisvecidx};
    basisvec_size = nstixperside*nstixperside*3;
    numvect = (numel(vect)/basisvec_size)-1;
    basisvec = cell(1,numvect);
    for jj = 1:numvect
        tmp_vec = vect((jj-1)*basisvec_size+1:basisvec_size*jj) + vect(numvect*basisvec_size+1:basisvec_size*(numvect+1));
        basisvec{jj} = reshape(tmp_vec,[nstixperside nstixperside 3]);
    end
    bkgnd_monitor = reshape(vect(numvect*basisvec_size+1:basisvec_size*(numvect+1)),[nstixperside nstixperside 3]);
    basisvec1 = basisvec{1}-bkgnd_monitor;
    basisvec2 = basisvec{2}-bkgnd_monitor;
    tmp = basisvec1 + basisvec2;
    im = (0.5 * tmp./(max(abs(tmp(:))) + 0.01)) + 0.5;
    figure(plot_counter+1);  subplot(numsubplots,numsubplots,ii); image(im); set(gca,'XTick',[],'YTick',[]); axis square; hold off;
    
    % Plotting the isoresponse contour
    THETA = THETA_all{1,ii};
    THETA = THETA * pi/180; % converting to radians
    RHO = RHO_all{1,ii};
    oog_idx = oog_idx_all{1,ii};
    not_oog_idx = not_oog_idx_all{1,ii};
    outofgamut = zeros(size(THETA));
    outofgamut(oog_idx) = 1;
    outofgamut = logical(outofgamut);
    [x_orig, y_orig] = pol2cart(THETA,RHO);
    figure(plot_counter+2); subplot(numsubplots,numsubplots,ii); plot(x_orig(not_oog_idx), y_orig(not_oog_idx),'o','MarkerSize',3,'LineWidth',0.5,'MarkerFaceColor',[0 0 1],'PickableParts','none','MarkerEdgeColor',[0 0 1]);
    if any(outofgamut)
        hold on; plot(upsample(x_orig(outofgamut),2),upsample(y_orig(outofgamut),2),'k'); 
    end
    set(gca,'XLim',[-1*max(RHO(not_oog_idx)) max(RHO(not_oog_idx))],'YLim',[-1*max(RHO(not_oog_idx)) max(RHO(not_oog_idx))]); drawnow; hold off;
    
    figure(plot_counter+3); subplot(numsubplots,numsubplots,ii); plot(mean(cell2mat(stro.ras(:,noisewvidx)))','k','Linewidth',2); hold on;  
    plot(mean(cell2mat(stro.ras(:,noisewvidx)))' - std(cell2mat(stro.ras(:,noisewvidx)))','k');
    plot(mean(cell2mat(stro.ras(:,noisewvidx)))' + std(cell2mat(stro.ras(:,noisewvidx)))','k');
    plot(mean(cell2mat(stro.ras(:,signalwvidx)))','b','Linewidth',2);
    plot(mean(cell2mat(stro.ras(:,signalwvidx)))'- std(cell2mat(stro.ras(:,signalwvidx)))','b');
    plot(mean(cell2mat(stro.ras(:,signalwvidx)))'+ std(cell2mat(stro.ras(:,signalwvidx)))','b'); hold off;
    
end
figure(plot_counter); hold on; set(gcf,'Name','All guns'); hold off;
figure(plot_counter+1); hold on; set(gcf,'Name','STA'); hold off;
figure(plot_counter+2); hold on; set(gcf,'Name','Isoresp'); hold off;
figure(plot_counter+3); hold on; set(gcf,'Name','Waveform'); hold off;
plot_counter = plot_counter + 3;   

save significantsubunits significantsubunits