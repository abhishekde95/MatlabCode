% Fitting a glm to neuronal response 
% Author - Abhishek De, 2/20
close all; clearvars;
plot_counter = 1;

% Created a whitenoise stimulus 
T = 10000; % in ms 
dt = 2; % Sampling time in ms 
t = 0:dt:T;
Stim = randn(size(t));

% Generate a dummy temporal impulse response filter
nkt = 100; % 100 ms 
maxT = nkt/dt;
Filt = 0.5*exp(-(0:maxT)).*poisspdf(0:maxT,5); % Filter response of a hypothetical response
Filt(1) = 0;

% Create a spike train from the hypothetical linear-nonlinear model
drive = conv(Stim,Filt,'same');
response = [];
for ii = 1:numel(t)
    response = [response poissrnd(exp(drive(ii)))];
end

% Now, I want to fit the responses to a simple GLM with exponential kernel and poisson spiking response
Neurofilter = fitGLM_AD(Stim,response,maxT+1); % custom made GLM function with post-spike filter

%*************************************************%
% Trying out Ali Weber's method of fitting the GLM using cosine basis functions
nkt = 100; % number of ms in stim filter
kbasprs.neye = 0; % number of "identity" basis vectors near time of spike;
kbasprs.ncos = 7; % number of raised-cosine vectors to use
kbasprs.kpeaks = [.1 round(nkt/1.2)];  % position of first and last bump (relative to identity bumps)
kbasprs.b = 10; % how nonlinear to make spacings (larger -> more linear)
%%% basis functions for post-spike kernel
ihbasprs.ncols = 7;  % number of basis vectors for post-spike kernel
ihbasprs.hpeaks = [.1 100];  % peak location for first and last vectors, in ms
ihbasprs.b = 10;  % how nonlinear to make spacings (larger -> more linear)
ihbasprs.absref = 1; % absolute refractory period, in ms

softRect = 0;    % use exponential nonlinearity
plotFlag = 1;    % plot fit
saveFlag = 1;    % save fit to fid, in new folder
maxIter = 1000;  % max number of iterations for fitting, also used for maximum number of function evaluations(MaxFunEvals)
tolFun = 1e-6;  % function tolerance for fitting
L2pen = 0;       % penalty on L2-norm of parameter coefficients

[k, h, dc, prs, kbasis, hbasis] = fit_glm(Stim,response,dt,nkt,kbasprs,ihbasprs,[],softRect,plotFlag,maxIter,tolFun,L2pen);


%**********************************************************%
% Plotting the Results
figure(plot_counter);
subplot(221); plot(t,Stim,'k'); axis square; set(gca,'Tickdir','out'); xlabel('time(s)'); ylabel('Stim'); title('Gaussian WN stim')
subplot(222); plot(0:dt:dt*maxT,Filt,'k'); axis square; set(gca,'Tickdir','out'); xlabel('time(s)'); ylabel('Filter response'); title('Temporal IRF');
subplot(223); plot(t,response,'k'); axis square; set(gca,'Tickdir','out'); xlabel('time(s)'); ylabel('Spike counts'), title('Spiking responses');
subplot(224); plot(0:dt:dt*maxT,Neurofilter.stimfilter./max(abs(Neurofilter.stimfilter)),'k'); hold on;
plot(0:dt:dt*maxT,Neurofilter.postspikefilter./max(abs(Neurofilter.postspikefilter)),'r'); axis square; set(gca,'Tickdir','out'); xlabel('time(s)'); 
legend('Spike filter','History filter'); ylabel('Filter response'); title('Fitted IRF');
plot_counter = plot_counter + 1;

