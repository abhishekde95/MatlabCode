/******************************************************************/
/*  Takes an NxMx3 image matrix and converts it to a Nx(2M)x3     */
/*  image matrix appropriate for driving the Bits++ box in        */
/*  Colour mode.                                                  */
/*                                                                */
/*  In ColourMode, the Bits++ takes pairs of horizontally         */
/*  adjacent pixels and combines them into a single "double-wide" */
/*  pixel at 14 bit color depth.  The high byte is taken from the */
/*  even-numbered pixels (starting at 0 at the left edge of the   */
/*  screen) and the low byte (actually only 6 bits) is taken from */
/*  the odd-numbered pixels.                                      */
/*                                                                */
/*  Each element in the input image matrix should be between 0    */
/*  and 65535.                                                    */
/*                                                                */
/*  GDLH 12/1/07                                                  */
/******************************************************************/

#include <stdio.h>
#include "mex.h"

/* Inputs */

#define IMAGE_IN        prhs[0]

/* Outputs */

#define IMAGE_OUT      plhs[0]


void mexFunction( int nlhs, mxArray *plhs[], int nrhs, const mxArray* prhs[])
{
    double *imagein_p;  
	double *imageout_p; /* Could make this uint8 * if that makes it go faster... */
	int insize[3], outsize[3];
	int i, j, k;        /* Indices for looping */
	int idxin, idxout;

    if (nrhs != 1) { 
	mexErrMsgTxt("One input required.");
    } else if (nlhs > 1) {
	mexErrMsgTxt("One output required.");
    }

	if(mxGetNumberOfDimensions(IMAGE_IN) != 3 || mxGetDimensions(IMAGE_IN)[2] != 3)
	{
		mexErrMsgTxt("Input should be an NxMx3 matrix.");
	}
	
	imagein_p = mxGetPr(IMAGE_IN);

   	insize[0] = mxGetDimensions(IMAGE_IN)[0];
	insize[1] = mxGetDimensions(IMAGE_IN)[1];
	insize[2] = mxGetDimensions(IMAGE_IN)[2];
	
	outsize[0] = insize[0];
	outsize[1] = insize[1]*2;
	outsize[2] = insize[2];

    IMAGE_OUT = mxCreateNumericArray (3, outsize, mxDOUBLE_CLASS, mxREAL);
	//IMAGE_OUT = mxCreateNumericArray (3, outsize, mxUINT8_CLASS, mxREAL);
	imageout_p = mxGetPr(IMAGE_OUT);
	
	for (k = 0; k < insize[2]; k++) {
		 for (j = 0; j < insize[1]; j++)  {
			for (i = 0; i < insize[0]; i++)
			{
				idxin = (int)(i+j*insize[0]+k*(insize[0]*insize[1]));
				idxout = (int)(i+j*2*insize[0]+k*2*(insize[0]*insize[1]));
				imageout_p[idxout] = (double)((int)imagein_p[idxin] >> 8);    /* high byte */
				imageout_p[idxout+insize[0]] = (double)((int)imagein_p[idxin] & 0x000000FF);   /* low byte */
			}
		}
	}
}