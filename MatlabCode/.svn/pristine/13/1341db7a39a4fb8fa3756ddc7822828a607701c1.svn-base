% A MATLAB script for understanding the link between edge processing and
% spatial integration
% Author - Abhishek De, 2/10
close all; clearvars;
plot_counter = 1;

% Reading a grayscale image 
% I = imread('pout.tif');
images = {'pout.tif'; 'coins.png'};

I_orig = imread('pout.tif');
% I_orig = imread('coins.png');
I_color = imread('peppers.png');
I_orig = rgb2gray(I_color);
I = im2double(I_orig)-0.5;

% Designing a filter
F = zeros(4,2); S1 = F; S2 = F;
S1(:,1) = 1; S2(:,2) = -1;
F = S1+S2;

% Linear filtered image 
I_linearv = conv2(I,F,'same');
I_linearv(I_linearv<0) = 0;
I_linear = I_linearv; % Adding the outputs of the horizontal and vertical filters
% I_linear(I_linear>prctile(I_linear(:),90))= 1;
I_linear = I_linear + 0.5-median(I_linear(:));

% Performing the squaring non-linear filtering operation
I_nonlinS1v = conv2(I,S1,'same'); I_S1 = I_nonlinS1v; I_nonlinS1v(I_nonlinS1v<0) = 0; 
I_nonlinS2v = conv2(I,S2,'same'); I_S2 = I_nonlinS2v; I_nonlinS2v(I_nonlinS2v<0) = 0;
I_nonlin = I_nonlinS1v.^2 + I_nonlinS2v.^2; I_nonlin(I_nonlin<0) = 0;
I_nonlin = I_nonlin./max(I_nonlin(:));
I_nonlin(I_nonlin<0) = 0; % Analogous to rectifying non-linearity
% I_nonlin(I_nonlin>prctile(I_nonlin(:),95))= 1;
I_nonlin = I_nonlin + 0.5-median(I_nonlin(:));

% Performing the square-root non-linear filtering operation
I_nonlin2 = sqrt(I_nonlinS1v) + sqrt(I_nonlinS2v); I_nonlin2(I_nonlin2<0) = 0;
I_nonlin2 = I_nonlin2./max(I_nonlin2(:)); % Analogous to rectifying non-linearity 
I_nonlin2(I_nonlin2<0) = 0;
% I_nonlin2(I_nonlin2>prctile(I_nonlin2(:),95))= 1; 
I_nonlin2 = I_nonlin2 + 0.5-median(I_nonlin2(:));

% I want to separate the grayscale image into low- and high-contrast
Drive_image = (I_nonlinS1v+I_nonlinS2v)/2;
I_locontrast = Drive_image; I_hicontrast = Drive_image;
I_locontrast(I_locontrast>median(I_locontrast(:))) = 0;
I_hicontrast(I_hicontrast<median(I_hicontrast(:))) = 0;

% Plotting the figures 
figure(plot_counter); set(gcf,'Name','Analyses of images: grayscale')
subplot(321); imshow(I_orig); axis square; set(gca,'XTick',[],'YTick',[]); title('original pic');
subplot(322); imshow(im2uint8(I_linear)); colormap('gray'); axis square; set(gca,'XTick',[],'YTick',[]); title('Linear');
subplot(323); imshow(im2uint8(I_nonlin)); colormap('gray'); axis square; set(gca,'XTick',[],'YTick',[]); title('Squaring non-linearity');
subplot(324); imshow(im2uint8(I_nonlin2)); colormap('gray'); axis square; set(gca,'XTick',[],'YTick',[]); title('Square-root');
subplot(325); imshow(I_hicontrast); colormap('jet'); axis square; set(gca,'XTick',[],'YTick',[]); title('Hi contrast image');
subplot(326); imshow(I_locontrast); colormap('jet'); axis square; set(gca,'XTick',[],'YTick',[]); title('Lo contrast image');
plot_counter = plot_counter + 1;

%%

% Implementing linear filtering in the RGB domain
I_color_filtered = imfilter(im2double(I_color),F,'conv');
I_color_filtered(I_color_filtered>prctile(I_color_filtered(:),95))= 1;

% Implementing squaring non-linear filtering 
I_color_filteredS1 = imfilter(im2double(I_color),S1,'conv'); I_color_filteredS1(I_color_filteredS1<0) = 0;
I_color_filteredS2 = imfilter(im2double(I_color),S2,'conv'); I_color_filteredS2(I_color_filteredS2<0) = 0;
I_color_filteredNL = I_color_filteredS1.^2 + I_color_filteredS2.^2;
I_color_filteredNL(I_color_filteredNL<0) = 0;
I_color_filteredNL = I_color_filteredNL./max(I_color_filteredNL(:));
I_color_filteredNL(I_color_filteredNL>prctile(I_color_filteredNL(:),99)) = 1;


% Implementing square-root non-linear filtering 
I_color_filteredNL2 = sqrt(I_color_filteredS1) + sqrt(I_color_filteredS2);
I_color_filteredNL2(I_color_filteredNL2<0) = 0;
I_color_filteredNL2 = I_color_filteredNL2./max(I_color_filteredNL2(:));
I_color_filteredNL2(I_color_filteredNL2>prctile(I_color_filteredNL2(:),99)) = 1;
figure(plot_counter); set(gcf,'Name','Analyses of images: RGB');
subplot(221); imshow(I_color); axis square; set(gca,'XTick',[],'YTick',[]); title('original pic');
subplot(222); image(im2uint8(I_color_filtered)); axis square; set(gca,'XTick',[],'YTick',[]); title('Linear');
subplot(223); image(im2uint8(I_color_filteredNL)); axis square; set(gca,'XTick',[],'YTick',[]); title('Squaring non-linearity');
subplot(224); image(im2uint8(I_color_filteredNL2)); axis square; set(gca,'XTick',[],'YTick',[]); title('Square-root');
plot_counter = plot_counter + 1;

% Simulating the responses of the 3 filters 
x = linspace(-1,1,51);
[X,Y] = meshgrid(x,x);
Resp_lin = zeros(size(X));
Resp_nonlin = zeros(size(X));
Resp_nonlin2 = zeros(size(X));
for ii = 1:size(X,1)
    for jj = 1:size(X,2)
        img = zeros(4,2);
        
        % Linear filter
        img(:,1) = X(ii,jj); img(:,2) = Y(ii,jj);
        Resp_lin(ii,jj) = img(:)'*F(:);
        
        % Squaring filter
        tmpS1 = max([0 img(:)'*S1(:)]); tmpS2 = max([0 img(:)'*S2(:)]);
        Resp_nonlin(ii,jj) = tmpS1^2 + tmpS2^2;
        
        % Square-root filter
        tmpS1 = max([0 img(:)'*S1(:)]); tmpS2 = max([0 img(:)'*S2(:)]);
        Resp_nonlin2(ii,jj) = sqrt(tmpS1) + sqrt(tmpS2);
    end
end

figure(plot_counter); set(gcf,'Name','Filter Isoresponse contours'); 
subplot(221); contour(x,x,Resp_lin,'Linewidth',2); xlabel('S1'); ylabel('S2'); axis square; set(gca,'Tickdir','out'); axis ij; title('Linear'); colormap('gray');
subplot(222); contour(x,x,Resp_nonlin,'Linewidth',2); xlabel('S1'); ylabel('S2'); axis square; set(gca,'Tickdir','out'); axis ij; title('Squaring'); colormap('gray');
subplot(223); contour(x,x,Resp_nonlin2,'Linewidth',2); xlabel('S1'); ylabel('S2'); axis square; set(gca,'Tickdir','out'); axis ij; title('Square-root'); colormap('gray');
plot_counter = plot_counter + 1;
